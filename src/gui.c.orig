/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Library General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor Boston, MA 02110-1301,  USA
 */

#include "gui.h"
#include "db_sqlite.h"

void new_button_clicked(void *data, Evas_Object *obj, void *event_info) 
{
	//open window to add new task
}

void select_category(void *data, Evas_Object *obj, void *event_info)
{
	char *ca = data;
	if(strcmp(ca, "Edit Categories")==0) {
		edit_cat();
		return;
	}
	elm_hoversel_label_set(hs, ca);
	//show only those tasks that meet this category
	show_cat_tasks(ca);
}

 void task_select(void *data, Evas_Object *obj, void *event_info)
{
	char tystr[2];
	
	Evas_Object *li = data;
	Elm_Genlist_Item *item = (Elm_Genlist_Item *)elm_genlist_selected_item_get(li);
	_Task *tsk = (_Task *)elm_genlist_item_data_get(item);
	elm_hoversel_label_set(hs, tsk->cat);
	sprintf(tystr, "%d", tsk->pr);
	elm_hoversel_label_set(pr_hs, tystr);
	elm_hoversel_label_set(date_hs, tsk->date);
	elm_entry_entry_set(entry, tsk->text);
}

static void
my_hover_bt_1(void *data, Evas_Object *obj, void *event_info)
{
   Evas_Object *hv = data;
   
   evas_object_show(hv);
}

//for genlist
Elm_Genlist_Item_Class itc1;

char *gl_label_get(const void *data, Evas_Object *obj, const char *part)
{
	_Task *tsk = (_Task *)data;
	char tystr[255], *ty;
	
	sprintf(tystr, "%s", tsk->text);
	ty = strdup(tystr);
	return (ty);
}

Evas_Object *gl_icon_get(const void *data, Evas_Object *obj, const char *part)
{
	_Task *tsk = (_Task *)data;
	
	char buf[PATH_MAX];
	if (!strcmp(part, "elm.swallow.icon")) {
		Evas_Object *ck, *bx, *bx1, *hv_pr, *bt;//*pr_lb;
		char txt[5];

		//show check box
		bx = elm_box_add(obj);
		elm_box_horizontal_set(bx, 1);
		evas_object_size_hint_weight_set(bx, 0.0, 0.0);
		ck = elm_check_add(obj);
		elm_box_pack_end(bx, ck);
		elm_check_state_set(ck, tsk->cb);
		evas_object_size_hint_weight_set(ck, 0.0, 0.0);
		evas_object_size_hint_align_set(ck, 0.5, 0.5);
		evas_object_show(ck);

/*		//add a label for priority
		sprintf(txt, "%d", tsk->pr);
		pr_lb = elm_label_add(obj);
		elm_label_label_set(pr_lb, txt);
		elm_box_pack_end(bx, pr_lb);
		evas_object_size_hint_weight_set(pr_lb, 0.0, 0.0);
		evas_object_size_hint_align_set(pr_lb, 0.5, 0.5);
		evas_object_show(pr_lb);   
		evas_object_show(bx);*/

		//add hover for priority
		hv_pr = elm_hover_add(obj);
		bt = elm_button_add(obj);
		sprintf(txt, "%d", tsk->pr);
		elm_button_label_set(bt, txt);
		evas_object_smart_callback_add(bt, "clicked", my_hover_bt_1, hv_pr);
		elm_box_pack_end(bx, bt);
		evas_object_show(bt);
		elm_hover_parent_set(hv_pr, obj);
		elm_hover_target_set(hv_pr, bt);

		bx1 = elm_box_add(obj);		
		bt = elm_button_add(obj);
		elm_button_label_set(bt, "1");
		elm_box_pack_end(bx1, bt);
		evas_object_show(bt);
		bt = elm_button_add(obj);
		elm_button_label_set(bt, "2");
		elm_box_pack_end(bx1, bt);
		evas_object_show(bt);
		bt = elm_button_add(obj);
		elm_button_label_set(bt, "3");
		elm_box_pack_end(bx1, bt);
		evas_object_show(bt);
		bt = elm_button_add(obj);
		elm_button_label_set(bt, "4");
		elm_box_pack_end(bx1, bt);
		evas_object_show(bt);
		bt = elm_button_add(obj);
		elm_button_label_set(bt, "5");
		elm_box_pack_end(bx1, bt);
		evas_object_show(bt);
		evas_object_show(bx1);
		elm_hover_content_set(hv_pr, "bottom", bx1);
		
		return bx;
		//evas_object_smart_callback_add(ck, "changed", my_gl_item_check_changed, data);
	}
   else if (!strcmp(part, "elm.swallow.end"))
     {
		Evas_Object *ic, *bx, *bx1, *lb_date, *hv_date, *bt, *entry;
		 
		bx = elm_box_add(obj);
        elm_box_horizontal_set(bx, 1);
        /*ic= elm_icon_add(obj);
        elm_box_pack_end(bx, ic);
		evas_object_size_hint_weight_set(ic, 0.0, 0.0);
		evas_object_size_hint_align_set(ic, 0.5, -1.0);
        evas_object_show(ic);

		lb_date = elm_label_add(obj);
		elm_label_label_set(lb_date, tsk->date);
        elm_box_pack_end(bx, lb_date);
		evas_object_size_hint_weight_set(lb_date, 0.0, 0.0);
		evas_object_size_hint_align_set(lb_date, 1.0, 0.5);
		evas_object_show(lb_date);
        evas_object_show(bx);*/

		//add hover for priority
		hv_date = elm_hover_add(obj);
		bt = elm_button_add(obj);
		elm_button_label_set(bt, tsk->date);
		evas_object_smart_callback_add(bt, "clicked", my_hover_bt_1, hv_date);
		elm_box_pack_end(bx, bt);
		evas_object_show(bt);
		elm_hover_parent_set(hv_date, obj);
		elm_hover_target_set(hv_date, bt);

		bx1 = elm_box_add(obj);
		entry = elm_entry_add(obj);

		elm_entry_single_line_set(entry, 1);
		elm_entry_editable_set(entry, 1);
		elm_entry_line_wrap_set(entry, 0);
		elm_box_pack_end(bx1, entry);
		elm_entry_entry_set(entry, tsk->date);
		evas_object_show(entry);
		/*bt = elm_button_add(obj);
		elm_button_label_set(bt, "1");
		elm_box_pack_end(bx1, bt);
		evas_object_show(bt);*/
		/*bt = elm_button_add(obj);
		elm_button_label_set(bt, "2");
		elm_box_pack_end(bx1, bt);
		evas_object_show(bt);
		bt = elm_button_add(obj);
		elm_button_label_set(bt, "3");
		elm_box_pack_end(bx1, bt);
		evas_object_show(bt);
		bt = elm_button_add(obj);
		elm_button_label_set(bt, "4");
		elm_box_pack_end(bx1, bt);
		evas_object_show(bt);
		bt = elm_button_add(obj);
		elm_button_label_set(bt, "5");
		elm_box_pack_end(bx1, bt);*/
		//evas_object_show(bt);
		evas_object_show(bx1);
		elm_hover_content_set(hv_date, "bottom", bx1);
		 
        return bx;
     }

	return NULL;
}

Evas_Bool gl_state_get(const void *data, Evas_Object *obj, const char *part)
{
   return 0;
}

void gl_del(const void *data, Evas_Object *obj)
{
}

void create_gui(Evas_Object *win)
{
	Evas_Object *bg, *hbox, *new_button, *prop_button, *note_button;
	Evas_Object *vbox, *hv, *bx, *hbox1;
	char buf[PATH_MAX];

	//add background
	bg = elm_bg_add(win);
	elm_win_resize_object_add(win, bg);
	evas_object_size_hint_weight_set(bg, 1.0, 1.0);
	evas_object_show(bg);

	//add vbox 4
	vbox = elm_box_add(win);
	elm_win_resize_object_add(win, vbox);
	evas_object_size_hint_weight_set(vbox, 1.0, 1.0);
	evas_object_show(vbox);

	//add hbox to vbox
	hbox = elm_box_add(win);
	elm_box_horizontal_set(hbox, 1);
	evas_object_size_hint_weight_set(hbox, 1.0, 0.0);
	evas_object_size_hint_align_set(hbox, -1.0, 0.0);
	elm_box_pack_end(vbox, hbox);
	evas_object_show(hbox);

/*	// add hoversel for priority
	pr_hs = elm_hoversel_add(win);
	elm_hoversel_hover_parent_set(pr_hs, win);
	elm_hoversel_label_set(pr_hs, " Priority ");
	elm_hoversel_item_add(pr_hs, "1", NULL, ELM_ICON_NONE, select_pr, "1");
	elm_hoversel_item_add(pr_hs, "2", NULL, ELM_ICON_NONE, select_pr, "2");
	elm_hoversel_item_add(pr_hs, "3", NULL, ELM_ICON_NONE, select_pr, "3");
	elm_hoversel_item_add(pr_hs, "4", NULL, ELM_ICON_NONE, select_pr, "4");
	elm_hoversel_item_add(pr_hs, "5", NULL, ELM_ICON_NONE, select_pr, "5");
	evas_object_size_hint_weight_set(pr_hs, 0.0, 0.0);
	evas_object_size_hint_align_set(pr_hs, 0.5, 0.5);
	elm_box_pack_end(hbox, pr_hs);
	evas_object_show(pr_hs);*/

	//add an entry
	entry = elm_entry_add(win);
	evas_object_size_hint_weight_set(entry, -1.0, -1.0);
	evas_object_size_hint_align_set(entry, -1.0, 0.5);
	elm_entry_single_line_set(entry, 1);
	elm_entry_editable_set(entry, 1);
	elm_entry_line_wrap_set(entry, 0);
	elm_box_pack_end(hbox, entry);
	elm_entry_entry_set(entry, "Enter Task Text Here");
	evas_object_show(entry);
	
/*	//add hover sel for date -15 to +15 days
	date_hs = elm_hoversel_add(win);
	elm_hoversel_hover_parent_set(date_hs, win);
	elm_hoversel_label_set(date_hs, "Date");
	//add_date_hs_items();
	evas_object_size_hint_weight_set(date_hs, 0.0, 0.0);
	evas_object_size_hint_align_set(date_hs, 0.5, 0.5);
	elm_box_pack_end(hbox, date_hs);
	evas_object_show(date_hs);*/

	//add list to vbox now
	list = elm_genlist_add(win);
	evas_object_size_hint_weight_set(list, 1.0, 1.0);
	evas_object_size_hint_align_set(list, -1.0, -1.0);
	elm_list_multi_select_set(list, 0);
	elm_box_pack_end(vbox, list);
	evas_object_show(list);
	evas_object_smart_callback_add(list, "selected", task_select, list);

	//genlist class defs
	itc1.item_style     		= "default";
	itc1.func.label_get 	= gl_label_get;
	itc1.func.icon_get  	= gl_icon_get;
	itc1.func.state_get 	= gl_state_get;
	itc1.func.del      		= gl_del;

	//add hbox to vbox at pos 4
	hbox1 = elm_box_add(win);
	elm_box_horizontal_set(hbox1, 1);
	evas_object_size_hint_weight_set(hbox1, 1.0, 0.0);
	evas_object_size_hint_align_set(hbox1, -1.0, 0.0);
	elm_box_pack_end(vbox, hbox1);
	evas_object_show(hbox1);

	//add new button to the hbox
	new_button = elm_button_add(win);
	//ic = elm_icon_add(win);
	//snprintf(buf, sizeof(buf), "%s/.intone/art/prev.png", home_dir);
	//elm_icon_file_set(ic, buf, NULL);
	//evas_object_size_hint_aspect_set(ic, EVAS_ASPECT_CONTROL_VERTICAL, 1, 1);
	//elm_button_icon_set(prev_button, ic);
	//evas_object_show(ic);
	elm_button_label_set(new_button, "New Task");
	evas_object_size_hint_weight_set(new_button, 1.0, 1.0);
	evas_object_size_hint_align_set(new_button, -1.0, -1.0);
	elm_box_pack_end(hbox1, new_button);
	evas_object_show(new_button);
	evas_object_smart_callback_add(new_button, "clicked", create_new_task, list);

	//add hover sel for category
	hs = elm_hoversel_add(win);
	elm_hoversel_hover_parent_set(hs, win);
	elm_hoversel_label_set(hs, " See All Tasks ");
	add_hs_items();
	evas_object_size_hint_weight_set(hs, 0.0, 0.0);
	evas_object_size_hint_align_set(hs, 0.5, 0.5);
	elm_box_pack_end(hbox1, hs);
	evas_object_show(hs);
	
	//add Properties button to the hbox
	prop_button = elm_button_add(win);
	//ic = elm_icon_add(win);
	//snprintf(buf, sizeof(buf), "%s/.intone/art/play.png", home_dir);
	//elm_icon_file_set(ic, buf, NULL);
	//evas_object_size_hint_aspect_set(ic, EVAS_ASPECT_CONTROL_VERTICAL, 1, 1);
	//elm_button_icon_set(play_button, ic);
	//evas_object_show(ic);
	elm_button_label_set(prop_button, "Properties");
	evas_object_size_hint_weight_set(prop_button, 1.0, 1.0);
	evas_object_size_hint_align_set(prop_button, -1.0, -1.0);
	elm_box_pack_end(hbox1, prop_button);
	//evas_object_show(prop_button);
	//evas_object_smart_callback_add(prop_button, "clicked", prop_button_clicked, list);

	//add note button to the hbox
	note_button = elm_button_add(win);
	//ic = elm_icon_add(win);
	//snprintf(buf, sizeof(buf), "%s/.intone/art/next.png", home_dir);
	//elm_icon_file_set(ic, buf, NULL);
	//evas_object_size_hint_aspect_set(ic, EVAS_ASPECT_CONTROL_VERTICAL, 1, 1);
	//elm_button_icon_set(next_button, ic);
	//evas_object_show(ic);
	elm_button_label_set(note_button, "Note");
	evas_object_size_hint_weight_set(note_button, 1.0, 1.0);
	evas_object_size_hint_align_set(note_button, -1.0, -1.0);
	elm_box_pack_end(hbox1, note_button);
	//evas_object_show(note_button);
	//evas_object_smart_callback_add(note_button, "clicked", note_button_clicked, list);

	// make window full screen
	evas_object_resize(win, 480, 600);
}

void create_new_task(void *data, Evas_Object *obj, void *event_info)
{
	Evas_Object *bg, *hbox, *new_button, *prop_button, *note_button, *hbox1, *hbox2, *hbox3, *hbox4;
	Evas_Object *vbox, *new_task_win, *lb, *pr_entry, *cat_entry, *date_entry, *task_entry;
	char buf[PATH_MAX];

	new_task_win = elm_win_add(NULL, "new_task", ELM_WIN_BASIC);
	elm_win_title_set(new_task_win, "Add New Task");
	//evas_object_smart_callback_add(win, "delete-request", my_win_del, NULL);
	
	//add background
	bg = elm_bg_add(new_task_win);
	elm_win_resize_object_add(new_task_win, bg);
	evas_object_size_hint_weight_set(bg, 1.0, 1.0);
	evas_object_show(bg);

	//add vbox 4
	vbox = elm_box_add(new_task_win);
	elm_win_resize_object_add(new_task_win, vbox);
	evas_object_size_hint_weight_set(vbox, 1.0, 1.0);
	evas_object_show(vbox);
	
	//add hbox to vbox
	hbox = elm_box_add(new_task_win);
	elm_box_horizontal_set(hbox, 1);
	evas_object_size_hint_weight_set(hbox, 1.0, 0.0);
	evas_object_size_hint_align_set(hbox, -1.0, 0.0);
	elm_box_pack_end(vbox, hbox);
	evas_object_show(hbox);

	//add label to hbox
	lb = elm_label_add(new_task_win);
	elm_label_label_set(lb, "Priority");
	elm_frame_content_set(hbox, lb);
	evas_object_show(lb);   
	
	//add entry to hbox
	pr_entry = elm_entry_add(new_task_win);
	evas_object_size_hint_weight_set(pr_entry, 1.0, 0.0);
	evas_object_size_hint_align_set(pr_entry, -1.0, 0.0);
	elm_entry_single_line_set(pr_entry, 1);
	elm_entry_editable_set(pr_entry, 1);
	elm_entry_line_wrap_set(pr_entry, 0);
	elm_box_pack_end(hbox, pr_entry);
	evas_object_show(pr_entry);
	
	//add hbox to vbox
	hbox1 = elm_box_add(new_task_win);
	elm_box_horizontal_set(hbox1, 1);
	evas_object_size_hint_weight_set(hbox1, 1.0, 0.0);
	evas_object_size_hint_align_set(hbox1, -1.0, 0.0);
	elm_box_pack_end(vbox, hbox1);
	evas_object_show(hbox1);

	//add label to hbox
	lb = elm_label_add(new_task_win);
	elm_label_label_set(lb, "Task");
	elm_frame_content_set(hbox1, lb);
	evas_object_show(lb);   
	
	//add entry to hbox
	task_entry = elm_entry_add(new_task_win);
	evas_object_size_hint_weight_set(task_entry, 1.0, 0.0);
	evas_object_size_hint_align_set(task_entry, -1.0, 0.0);
	elm_entry_single_line_set(task_entry, 1);
	elm_entry_editable_set(task_entry, 1);
	elm_entry_line_wrap_set(task_entry, 0);
	elm_box_pack_end(hbox1, task_entry);
	evas_object_show(task_entry);

	//add hbox to vbox
	hbox2 = elm_box_add(new_task_win);
	elm_box_horizontal_set(hbox2, 1);
	evas_object_size_hint_weight_set(hbox2, 1.0, 0.0);
	evas_object_size_hint_align_set(hbox2, -1.0, 0.0);
	elm_box_pack_end(vbox, hbox2);
	evas_object_show(hbox2);

	//add label to hbox
	lb = elm_label_add(new_task_win);
	elm_label_label_set(lb, "Due Date");
	elm_frame_content_set(hbox2, lb);
	evas_object_show(lb);   
	
	//add entry to hbox
	date_entry = elm_entry_add(new_task_win);
	evas_object_size_hint_weight_set(date_entry, 1.0, 0.0);
	evas_object_size_hint_align_set(date_entry, -1.0, 0.0);
	elm_entry_single_line_set(date_entry, 1);
	elm_entry_editable_set(date_entry, 1);
	elm_entry_line_wrap_set(date_entry, 0);
	elm_box_pack_end(hbox2, date_entry);
	evas_object_show(date_entry);

	//add hbox to vbox
	hbox3 = elm_box_add(new_task_win);
	elm_box_horizontal_set(hbox3, 1);
	evas_object_size_hint_weight_set(hbox3, 1.0, 0.0);
	evas_object_size_hint_align_set(hbox3, -1.0, 0.0);
	elm_box_pack_end(vbox, hbox3);
	evas_object_show(hbox3);

	//add label to hbox
	lb = elm_label_add(new_task_win);
	elm_label_label_set(lb, "Category");
	elm_frame_content_set(hbox3, lb);
	evas_object_show(lb);   
	
	//add entry to hbox
	cat_entry = elm_entry_add(new_task_win);
	evas_object_size_hint_weight_set(cat_entry, 1.0, 0.0);
	evas_object_size_hint_align_set(cat_entry, -1.0, 0.0);
	elm_entry_single_line_set(cat_entry, 1);
	elm_entry_editable_set(cat_entry, 1);
	elm_entry_line_wrap_set(cat_entry, 0);
	elm_box_pack_end(hbox3, cat_entry);
	evas_object_show(cat_entry);

	//add hbox to vbox
	hbox4 = elm_box_add(new_task_win);
	elm_box_horizontal_set(hbox4, 1);
	evas_object_size_hint_weight_set(hbox4, 1.0, 0.0);
	evas_object_size_hint_align_set(hbox4, -1.0, 0.0);
	elm_box_pack_end(vbox, hbox4);
	evas_object_show(hbox4);

	//add new button to the hbox
	new_button = elm_button_add(new_task_win);
	//ic = elm_icon_add(win);
	//snprintf(buf, sizeof(buf), "%s/.intone/art/prev.png", home_dir);
	//elm_icon_file_set(ic, buf, NULL);
	//evas_object_size_hint_aspect_set(ic, EVAS_ASPECT_CONTROL_VERTICAL, 1, 1);
	//elm_button_icon_set(prev_button, ic);
	//evas_object_show(ic);
	elm_button_label_set(new_button, "New Task");
	evas_object_size_hint_weight_set(new_button, 1.0, 1.0);
	evas_object_size_hint_align_set(new_button, -1.0, -1.0);
	elm_box_pack_end(hbox4, new_button);
	evas_object_show(new_button);
	evas_object_smart_callback_add(new_button, "clicked", new_button_clicked, list);

	//add Properties button to the hbox
	prop_button = elm_button_add(new_task_win);
	//ic = elm_icon_add(win);
	//snprintf(buf, sizeof(buf), "%s/.intone/art/play.png", home_dir);
	//elm_icon_file_set(ic, buf, NULL);
	//evas_object_size_hint_aspect_set(ic, EVAS_ASPECT_CONTROL_VERTICAL, 1, 1);
	//elm_button_icon_set(play_button, ic);
	//evas_object_show(ic);
	elm_button_label_set(prop_button, "Properties");
	evas_object_size_hint_weight_set(prop_button, 1.0, 1.0);
	evas_object_size_hint_align_set(prop_button, -1.0, -1.0);
	elm_box_pack_end(hbox4, prop_button);
	evas_object_show(prop_button);
	//evas_object_smart_callback_add(prop_button, "clicked", prop_button_clicked, list);

	//add note button to the hbox
	note_button = elm_button_add(new_task_win);
	//ic = elm_icon_add(win);
	//snprintf(buf, sizeof(buf), "%s/.intone/art/next.png", home_dir);
	//elm_icon_file_set(ic, buf, NULL);
	//evas_object_size_hint_aspect_set(ic, EVAS_ASPECT_CONTROL_VERTICAL, 1, 1);
	//elm_button_icon_set(next_button, ic);
	//evas_object_show(ic);
	elm_button_label_set(note_button, "Note");
	evas_object_size_hint_weight_set(note_button, 1.0, 1.0);
	evas_object_size_hint_align_set(note_button, -1.0, -1.0);
	elm_box_pack_end(hbox4, note_button);
	evas_object_show(note_button);
	//evas_object_smart_callback_add(note_button, "clicked", note_button_clicked, list);
	
	// make window full screen
	evas_object_resize(new_task_win, 480, 600);
	evas_object_show(new_task_win);
}

void edit_cat(void) 
{
	
}
